{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d9df7831",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:28.951019Z",
     "iopub.status.busy": "2024-07-25T02:13:28.950198Z",
     "iopub.status.idle": "2024-07-25T02:13:29.705219Z",
     "shell.execute_reply": "2024-07-25T02:13:29.704240Z"
    },
    "papermill": {
     "duration": 0.763645,
     "end_time": "2024-07-25T02:13:29.707748",
     "exception": false,
     "start_time": "2024-07-25T02:13:28.944103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "840f7d84",
   "metadata": {
    "papermill": {
     "duration": 0.003594,
     "end_time": "2024-07-25T02:13:29.716224",
     "exception": false,
     "start_time": "2024-07-25T02:13:29.712630",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Optimize tensorflow pipeline performance with prefetch and caching"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "540b9ab3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:29.726326Z",
     "iopub.status.busy": "2024-07-25T02:13:29.725358Z",
     "iopub.status.idle": "2024-07-25T02:13:42.243069Z",
     "shell.execute_reply": "2024-07-25T02:13:42.242047Z"
    },
    "papermill": {
     "duration": 12.525301,
     "end_time": "2024-07-25T02:13:42.245609",
     "exception": false,
     "start_time": "2024-07-25T02:13:29.720308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-25 02:13:31.585847: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-25 02:13:31.585986: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-25 02:13:31.721790: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import time\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f96bdc0e",
   "metadata": {
    "papermill": {
     "duration": 0.004212,
     "end_time": "2024-07-25T02:13:42.254353",
     "exception": false,
     "start_time": "2024-07-25T02:13:42.250141",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Prefetch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9d9aaa15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:42.264369Z",
     "iopub.status.busy": "2024-07-25T02:13:42.263727Z",
     "iopub.status.idle": "2024-07-25T02:13:42.270771Z",
     "shell.execute_reply": "2024-07-25T02:13:42.269609Z"
    },
    "papermill": {
     "duration": 0.014876,
     "end_time": "2024-07-25T02:13:42.273324",
     "exception": false,
     "start_time": "2024-07-25T02:13:42.258448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FileDataset(tf.data.Dataset):\n",
    "    def read_file_in_batches(num_samples):\n",
    "        # Opening the file\n",
    "        time.sleep(0.03)\n",
    "\n",
    "        for sample_idx in range(num_samples):\n",
    "            # Reading data (line, record) from the file\n",
    "            time.sleep(0.015)\n",
    "\n",
    "            yield (sample_idx,)\n",
    "\n",
    "    def __new__(cls, num_samples=3):\n",
    "        return tf.data.Dataset.from_generator(\n",
    "            cls.read_file_in_batches,\n",
    "            output_signature = tf.TensorSpec(shape = (1,), dtype = tf.int64),\n",
    "            args=(num_samples,)\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fe06d373",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:42.283614Z",
     "iopub.status.busy": "2024-07-25T02:13:42.282887Z",
     "iopub.status.idle": "2024-07-25T02:13:42.288079Z",
     "shell.execute_reply": "2024-07-25T02:13:42.287060Z"
    },
    "papermill": {
     "duration": 0.01274,
     "end_time": "2024-07-25T02:13:42.290269",
     "exception": false,
     "start_time": "2024-07-25T02:13:42.277529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def benchmark(dataset, num_epochs=2):\n",
    "    for epoch_num in range(num_epochs):\n",
    "        for sample in dataset:\n",
    "            # Performing a training step\n",
    "            time.sleep(0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9559021a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:42.300647Z",
     "iopub.status.busy": "2024-07-25T02:13:42.300011Z",
     "iopub.status.idle": "2024-07-25T02:13:44.446814Z",
     "shell.execute_reply": "2024-07-25T02:13:44.445654Z"
    },
    "papermill": {
     "duration": 2.154286,
     "end_time": "2024-07-25T02:13:44.449044",
     "exception": false,
     "start_time": "2024-07-25T02:13:42.294758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "258 ms ± 1.58 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "benchmark(FileDataset())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5c796318",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:44.459001Z",
     "iopub.status.busy": "2024-07-25T02:13:44.458252Z",
     "iopub.status.idle": "2024-07-25T02:13:46.543528Z",
     "shell.execute_reply": "2024-07-25T02:13:46.542168Z"
    },
    "papermill": {
     "duration": 2.092674,
     "end_time": "2024-07-25T02:13:46.545825",
     "exception": false,
     "start_time": "2024-07-25T02:13:44.453151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "260 ms ± 2.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "benchmark(FileDataset().prefetch(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "18a3a704",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:46.556809Z",
     "iopub.status.busy": "2024-07-25T02:13:46.555546Z",
     "iopub.status.idle": "2024-07-25T02:13:48.636134Z",
     "shell.execute_reply": "2024-07-25T02:13:48.634877Z"
    },
    "papermill": {
     "duration": 2.088342,
     "end_time": "2024-07-25T02:13:48.638518",
     "exception": false,
     "start_time": "2024-07-25T02:13:46.550176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "259 ms ± 695 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "benchmark(FileDataset().prefetch(tf.data.AUTOTUNE))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0de508ba",
   "metadata": {
    "papermill": {
     "duration": 0.003944,
     "end_time": "2024-07-25T02:13:48.646765",
     "exception": false,
     "start_time": "2024-07-25T02:13:48.642821",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f875100e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:48.657393Z",
     "iopub.status.busy": "2024-07-25T02:13:48.656467Z",
     "iopub.status.idle": "2024-07-25T02:13:48.719721Z",
     "shell.execute_reply": "2024-07-25T02:13:48.718707Z"
    },
    "papermill": {
     "duration": 0.071007,
     "end_time": "2024-07-25T02:13:48.721979",
     "exception": false,
     "start_time": "2024-07-25T02:13:48.650972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 4, 9, 16]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = tf.data.Dataset.range(5)\n",
    "dataset = dataset.map(lambda x: x**2)\n",
    "dataset = dataset.cache(\"mycache.txt\")\n",
    "# The first time reading through the data will generate the data using\n",
    "# `range` and `map`.\n",
    "list(dataset.as_numpy_iterator())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a42a952e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:48.732771Z",
     "iopub.status.busy": "2024-07-25T02:13:48.731952Z",
     "iopub.status.idle": "2024-07-25T02:13:48.740735Z",
     "shell.execute_reply": "2024-07-25T02:13:48.739760Z"
    },
    "papermill": {
     "duration": 0.016819,
     "end_time": "2024-07-25T02:13:48.743260",
     "exception": false,
     "start_time": "2024-07-25T02:13:48.726441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 4, 9, 16]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Subsequent iterations read from the cache.\n",
    "list(dataset.as_numpy_iterator())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b3bc5aff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:48.753991Z",
     "iopub.status.busy": "2024-07-25T02:13:48.753594Z",
     "iopub.status.idle": "2024-07-25T02:13:48.758690Z",
     "shell.execute_reply": "2024-07-25T02:13:48.757758Z"
    },
    "papermill": {
     "duration": 0.012901,
     "end_time": "2024-07-25T02:13:48.760805",
     "exception": false,
     "start_time": "2024-07-25T02:13:48.747904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def mapped_function(s):\n",
    "    # Do some hard pre-processing\n",
    "    tf.py_function(lambda: time.sleep(0.03), [], ())\n",
    "    return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "63b59cc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T02:13:48.771705Z",
     "iopub.status.busy": "2024-07-25T02:13:48.770980Z",
     "iopub.status.idle": "2024-07-25T02:13:49.889200Z",
     "shell.execute_reply": "2024-07-25T02:13:49.887939Z"
    },
    "papermill": {
     "duration": 1.126321,
     "end_time": "2024-07-25T02:13:49.891703",
     "exception": false,
     "start_time": "2024-07-25T02:13:48.765382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.11 s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit -r1 -n1\n",
    "benchmark(FileDataset().map(mapped_function), 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97dece49",
   "metadata": {
    "papermill": {
     "duration": 0.004414,
     "end_time": "2024-07-25T02:13:49.900788",
     "exception": false,
     "start_time": "2024-07-25T02:13:49.896374",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Further Reading**: [TensorFlow Data Performance Guide: Caching](https://www.tensorflow.org/guide/data_performance#caching)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 26.040986,
   "end_time": "2024-07-25T02:13:52.299009",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-25T02:13:26.258023",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
